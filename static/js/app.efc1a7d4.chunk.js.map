{"version":3,"sources":["components/TodoList/styled.js","components/Item/styled.js","components/Item/index.js","components/InputField/styled.js","components/Alert/styled.js","components/Alert/index.js","components/InputField/index.js","components/BrowserDialog/styles.js","components/BrowserDialog/index.js","components/TodoList/index.js","App.js"],"names":["styles","StyleSheet","create","container","flex","justifyContent","backgroundColor","marginHorizontal","marginTop","padding","borderWidth","borderRadius","borderColor","height","todoContainer","title","paddingBottom","scroll","flexGrow","itemRow","flexDirection","alignItems","borderBottomWidth","borderBottomColor","paddingRight","itemText","color","fontSize","checkboxContainer","marginLeft","Item","id","onCheckboxPress","children","useState","checked","View","style","containerStyle","onPress","h4","h4Style","propTypes","PropTypes","number","isRequired","func","inputContainer","textAlign","width","Platform","OS","icon","alertContainer","marginVertical","alertText","error","success","Alert","level","Text","oneOf","InputField","onEnter","status","setItemText","showAlert","setShowAlert","inputField","useRef","Object","keys","length","alertLevel","renderAlert","ref","placeholder","leftIcon","type","name","leftIconContainerStyle","inputStyle","onChangeText","text","onKeyPress","nativeEvent","key","onSubmitEditing","current","clear","focus","value","shape","string","position","opacity","top","left","transform","translateX","translateY","zIndex","dialogContainer","right","bottom","dialog","borderStyle","margin","buttonActions","responseValue","BrowserDialog","message","onResponse","Button","StatusBar","TodoList","todo","items","setItems","show","selectedId","browserDialog","setBrowserDialog","inputFieldStatus","setInputFieldStatus","scrollView","handleDialogResponse","confirmRemove","idToRemove","updatedTodoList","filter","item","handleCheckboxPress","itemId","alert","response","h3","h3Style","KeyboardAvoidingView","behavior","ScrollView","onContentSizeChange","scrollToEnd","animated","keyboardDismissMode","keyboardShouldPersistTaps","map","i","newTodo","itemTextStatus","inputFieldText","cleanedText","trim","toLowerCase","test","every","checkInputFieldText","newTodoList","App"],"mappings":"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","file":"static/js/app.efc1a7d4.chunk.js","sourcesContent":["import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    backgroundColor: '#f2fcff',\n    marginHorizontal: '3%',\n    marginTop: '10%',\n    padding: '5%',\n    borderWidth: 2,\n    borderRadius: 10,\n    borderColor: 'lightgray',\n    height: '100%',\n  },\n  todoContainer: {\n    flex: 1,\n  },\n  title: {\n    paddingBottom: '5%',\n  },\n  scroll: {\n    flexGrow: 1,\n    height: 100,\n  }\n});","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  itemRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    borderBottomWidth: 2,\n    borderBottomColor: 'lightgray',\n\n    paddingRight: '3%',\n  },\n  itemText: {\n    color: 'gray',\n    fontSize: 24,\n  },\n  checkboxContainer: {\n    marginLeft: 0,\n  },\n});","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { Alert, Text, View } from 'react-native';\nimport { CheckBox, Text as RNEText } from 'react-native-elements';\nimport { styles } from './styled';\n\nconst Item = ({ id, onCheckboxPress, children }) => {\n  const [checked, setChecked] = useState(false); // we might not need this anymore\n\n  return (\n    <View style={styles.itemRow}>\n      <CheckBox\n        containerStyle={styles.checkboxContainer}\n        checked={checked}\n        onPress={() => onCheckboxPress(id)}\n      />\n      <RNEText h4 h4Style={styles.itemText}>{ children }</RNEText>\n    </View>\n  )\n}\n\nItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  onCheckboxPress: PropTypes.func,\n};\n\nexport default Item;","import { StyleSheet, Platform } from 'react-native'\n\nexport const styles = StyleSheet.create({\n  inputContainer: {\n    padding: 10,\n    textAlign: 'right',\n    width: Platform.OS === 'web' ? 'calc(80% - 30px)' : '50%',\n  },\n  icon: {\n    paddingRight: 10,\n  }\n});","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  alertContainer: {\n    marginVertical: 5,\n    padding: 5,\n    borderWidth: 2,\n    borderRadius: 5,\n  },\n  alertText: {\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  error: {\n    backgroundColor: '#ff9494',\n    borderColor: 'red',\n  },\n  success: {\n    backgroundColor: '#e8ffe8',\n    borderColor: 'green',\n  },\n});","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { View, Text } from 'react-native';\n\nimport { styles } from './styled';\n \nconst Alert = ({ level, children }) => {\n  return (\n    <View style={[ styles.alertContainer, styles[level] ]}>\n      <Text style={styles.alertText}>{ children }</Text>     \n    </View>\n  )\n}\n\nAlert.propTypes = {\n  level: PropTypes.oneOf([\n    'success',\n    'error'\n  ])\n}\n\nexport default Alert;\n\n","import PropTypes from 'prop-types';\nimport React, { useState, useRef } from 'react';\nimport { View, Platform } from 'react-native';\nimport { Input as RNETextInput } from 'react-native-elements';\n\nimport { styles } from './styled';\nimport Alert from '../Alert';\n\nconst InputField = ({ onEnter, status }) => {\n  const [itemText, setItemText] = useState('');\n  const [showAlert, setShowAlert] = useState(false);\n  const inputField = useRef(null);\n\n  /**\n   * called when a key is pressed\n   * @listens onKeyPress InputField\n   * @param {SyntheticEvent} nativeEvent\n   */\n  const handleKeyPress = ({ nativeEvent: { key } }) => {\n    // hide visible Alert box when user types\n    if (showAlert) {\n      setShowAlert(false);\n    }\n  }\n\n  /**\n   * called when the user submits in text input\n   * @listens onSubmitEditing InputField\n   * @param {SyntheticEvent} nativeEvent\n   */\n  const handleOnSubmit = ({ nativeEvent: { text } }) => {\n    onEnter(itemText);\n    setShowAlert(true);\n    \n    // unfortunately cant get instance methods on web to work\n    if (Platform.OS === 'web') {\n      setItemText('');\n    } else {\n      inputField.current.clear();\n      inputField.current.focus();\n    }\n  }\n\n  /**\n   * render logic for Alert box above text input\n   * @returns {Alert | null}\n   */\n  const renderAlert = () => {\n    if (status && Object.keys(status).length > 0) {\n      const alertLevel = status.success ? 'success' : 'error';\n\n      return (\n        <Alert level={alertLevel} >{ status[alertLevel] }</Alert>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <View>\n      { showAlert && renderAlert() }\n      <RNETextInput\n        ref={inputField}\n        placeholder=\"enter here!\"\n        leftIcon={{ type: 'font-awesome', name: 'angle-double-right' }}\n        leftIconContainerStyle={styles.icon}\n        inputStyle={styles.inputContainer}\n        onChangeText={(text) => setItemText(text)}\n        onKeyPress={handleKeyPress}\n        onSubmitEditing={handleOnSubmit}\n        value={itemText}\n      />\n    </View>\n  )\n}\n\nInputField.propTypes = {\n  onEnter: PropTypes.func,\n  status: PropTypes.shape({\n    success: PropTypes.string,\n    error: PropTypes.string,\n  }),\n};\n\nexport default InputField;\n","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    opacity: 1,\n    alignItems: 'center',\n    top: '50%',\n    left: '50%',\n    width: '100%',\n    height: '100%',\n    transform: [{ translateX: '-50%' }, { translateY: '-50%' }],\n    zIndex: 9999,\n  },\n  dialogContainer : {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    \n  },\n  dialog: {\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: '#000',\n    margin: '0 auto',\n    borderRadius: 5,\n    padding: 30,\n    backgroundColor: '#FFF',\n  },\n  buttonActions : {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 30,\n  },\n  responseValue: {\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: '#000',\n    padding: 20,\n    borderRadius: 5,\n    marginTop: 30,\n  },\n});","import PropTypes from 'prop-types';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport { Text, View, Button } from 'react-native';\n\nimport { styles } from './styles';\n\n/**\n * courtesy of our amazing lead Juan Lucero\n */\nconst BrowserDialog = ({ message, onResponse }) => {\n  const displayDialog = () => (\n    <View style={styles.dialogContainer}>\n      <View style={styles.dialog}>\n        <Text>{ message || 'Dialog Message: tap ok or cancel.' }</Text>\n        <View style={styles.buttonActions}>\n          <Button\n            title=\"Cancel\"\n            onPress={() => onResponse(false)}\n          />\n          <Button\n            title=\"OK\"\n            onPress={() => onResponse(true)}\n          />\n        </View>\n      </View>\n    </View>\n  )\n\n  return (\n    <View style={styles.container}>\n      { displayDialog() }  \n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nBrowserDialog.propTypes = {\n  message: PropTypes.string,\n  onResponse: PropTypes.func,\n}\n\nexport default BrowserDialog;","import React, { useState, useRef } from 'react';\nimport { View, Platform, ScrollView, KeyboardAvoidingView, Alert } from 'react-native';\nimport { Text as RNEText } from 'react-native-elements';\n\nimport { styles } from './styled'\nimport Item from '../Item';\nimport InputField from '../InputField';\nimport BrowserDialog from '../BrowserDialog';\n\nconst TodoList = () => {\n  const [items, setItems] = useState([\n    { todo: 'code this app' },\n    { todo: 'write a good user story' },\n    { todo: 'make cool stuff' },\n    { todo: 'do it well' },\n  ]);\n  const [browserDialog, setBrowserDialog] = useState({ show: false, selectedId: -1 });\n  const [inputFieldStatus, setInputFieldStatus] = useState({});\n  const scrollView = useRef(null);\n\n /**\n  * @todo: expand this predicate to trim() extra whitespaces in between words,\n  * check empty string, single/double quotes,\n  * illegal characters to prevent database injection, etc.\n  * @param {string} inputFieldText\n  */\n  const checkInputFieldText = (inputFieldText) => {\n    // trim blank spaces around, convert to lowercase\n    let cleanedText = inputFieldText.trim().toLowerCase();\n    // checks for illegal characters\n    if ( !(/^[a-zA-Z0-9- ]*$/.test(cleanedText)) ) {\n      return { error: 'Only letters and numbers are allowed 🚫' };\n    }\n    // checks if string length is 0\n    if (cleanedText.length === 0) {\n      return { error: 'That input is blank! 🚫' };\n    }\n    // checks each todo list item for duplicates\n    const isNotDuplicate = items.every(item => item.todo.toLowerCase() !== cleanedText)\n    return isNotDuplicate\n      ? { success: 'Item added to your todo list ✅' }\n      : { error: 'That todo list item is a duplicate 🚫' };\n  }\n\n /**\n  * called when user presses a button in popup dialog\n  * @listens onPress Alert\n  * @listens onResponse BrowserDialog\n  * @param {boolean} confirmRemove\n  * @param {number} idToRemove\n  */\n  const handleDialogResponse = (confirmRemove, idToRemove) => {\n    if (confirmRemove) {\n      // remove item from list!\n      const updatedTodoList = items.filter( (item, id)=> id !== idToRemove );\n      setItems(updatedTodoList);\n    }\n    if (Platform.OS === 'web') {\n      setBrowserDialog({ show: false, selectedId: -1 });\n    }\n    // hides the alert box above the input field\n    setInputFieldStatus({});\n  }\n\n /**\n  * called when a checkbox on a todo list item is pressed\n  * @listens onCheckboxPress Item\n  * @param {number} itemId\n  */\n  const handleCheckboxPress = (itemId) => {\n    if (Platform.OS === 'web') {\n      // setShowDialog here to render a web dialog\n      setBrowserDialog({ show: true, selectedId: itemId });\n    } else {\n      Alert.alert(\n        \"Remove This Entry?\",\n        items[itemId].todo,\n        [\n          { text: \"Yes\", onPress: () => handleDialogResponse(true, itemId), style: \"destructive\" },\n          { text: \"NOOO\", onPress: () => handleDialogResponse(false, itemId), style: \"default\" },\n        ]\n      );\n    }\n  }\n\n  /**\n   * called when user submits text in input field\n   * @listens onEnter InputField\n   * @param {string} newTodo\n   */\n  const handleInputOnEnter = (newTodo) => {\n    const itemTextStatus = checkInputFieldText(newTodo);\n\n    if (itemTextStatus.success) {\n      const newTodoList = [ ...items, {todo: newTodo} ];\n      setItems(newTodoList);\n    }\n\n    setInputFieldStatus(itemTextStatus);\n  }\n\n  // best practice - use unique id as key (ex: nanoid)\n  // last resort - use index as key\n  return (\n    <View style={styles.container}>\n      {\n        browserDialog.show\n          ? <BrowserDialog\n              onResponse={response => handleDialogResponse(response, browserDialog.selectedId)}\n              message={ `Remove this entry?\\n\\n${items[ browserDialog.selectedId ].todo}` }\n            />\n          : null\n      }\n      <RNEText\n        h3\n        h3Style={styles.title}\n      >\n        My Todo List\n      </RNEText>\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n        style={styles.todoContainer}\n      >\n        <ScrollView\n          ref={scrollView}\n          onContentSizeChange={ () => scrollView.current.scrollToEnd({ animated: true }) }\n          keyboardDismissMode={Platform.OS === 'ios' ? 'interactive' : 'on-drag'}\n          keyboardShouldPersistTaps=\"always\"\n          style={styles.scroll}\n        >\n        {\n          items.map((item, i) => (\n            <Item\n              key={i}\n              id={i}\n              onCheckboxPress={handleCheckboxPress}\n            >\n              {item.todo}\n            </Item>\n          ))\n        }\n        </ScrollView>\n        <InputField\n          onEnter={handleInputOnEnter}\n          status={inputFieldStatus}\n        />\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nexport default TodoList;","import React from 'react';\n// import { View, Text, Button, Alert, StyleSheet } from 'react-native';\n// import { CheckBox, } from 'react-native-elements'\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  \n  return (\n    <TodoList />\n    // test\n  )\n}\n\nexport default App;"],"sourceRoot":""}